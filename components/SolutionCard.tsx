import React, { useState, useRef } from 'react';
import { View, StyleSheet, Animated, Modal } from 'react-native';
import { Surface, Text, IconButton, Portal } from 'react-native-paper';
import { LinearGradient } from 'expo-linear-gradient';
import LottieView from 'lottie-react-native';
import { theme } from '../lib/theme';
import { Share } from 'react-native';
import { updateStats } from '../lib/stats';
import MemeGenerator from './MemeGenerator';

interface SolutionCardProps {
  solution: string;
  frustration?: string;
}

export default function SolutionCard({ solution, frustration }: SolutionCardProps) {
  const [liked, setLiked] = useState(false);
  const [memeVisible, setMemeVisible] = useState(false);
  const scaleAnim = new Animated.Value(0.9);
  const lottieRef = useRef<LottieView>(null);

  React.useEffect(() => {
    Animated.spring(scaleAnim, {
      toValue: 1,
      friction: 5,
      useNativeDriver: true,
    }).start();
    lottieRef.current?.play();
  }, []);

  const handleShare = async () => {
    try {
      await Share.share({
        message: `Problem: ${frustration}\nSolution: ${solution}\n\nâœ¨ Generated by FixItNow`,
      });
      await updateStats({ solutionsShared: 1 });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const handleLike = () => {
    setLiked(!liked);
    if (!liked) {
      lottieRef.current?.play();
    }
  };

  const handleMeme = () => {
    setMemeVisible(true);
  };

  return (
    <>
      <Animated.View style={[styles.container, { transform: [{ scale: scaleAnim }] }]}>
        <View style={styles.shadowContainer}>
          <Surface style={styles.card} elevation={4}>
            <LinearGradient
              colors={theme.colors.gradient}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
              style={styles.header}
            >
              <Text style={styles.headerText}>Problem Solved! ðŸŽ‰</Text>
              <LottieView
                ref={lottieRef}
                source={require('../assets/animations/sparkles.json')}
                style={styles.lottie}
                loop={false}
                autoPlay
              />
            </LinearGradient>
            
            <View style={styles.content}>
              <Text style={styles.solution}>{solution}</Text>
              
              <View style={styles.actions}>
                <IconButton
                  icon="share-variant"
                  mode="contained"
                  containerColor={theme.colors.primary}
                  iconColor="white"
                  size={24}
                  onPress={handleShare}
                />
                <IconButton
                  icon={liked ? "heart" : "heart-outline"}
                  mode="contained"
                  containerColor={liked ? theme.colors.error : theme.colors.secondary}
                  iconColor="white"
                  size={24}
                  onPress={handleLike}
                />
                <IconButton
                  icon="sticker-emoji"
                  mode="contained"
                  containerColor={theme.colors.tertiary}
                  iconColor="white"
                  size={24}
                  onPress={handleMeme}
                />
              </View>
            </View>
          </Surface>
        </View>
      </Animated.View>

      <Portal>
        <Modal
          visible={memeVisible}
          onDismiss={() => setMemeVisible(false)}
          contentContainerStyle={styles.modalContainer}
        >
          <MemeGenerator
            frustration={frustration || ''}
            solution={solution}
            onClose={() => setMemeVisible(false)}
          />
        </Modal>
      </Portal>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    marginVertical: 16,
    marginHorizontal: 16,
  },
  card: {
    borderRadius: theme.roundness,
    overflow: 'hidden',
  },
  header: {
    padding: 16,
    position: 'relative',
  },
  headerText: {
    color: 'white',
    fontSize: 20,
    fontWeight: '600',
    textAlign: 'center',
  },
  lottie: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    opacity: 0.5,
  },
  content: {
    padding: 16,
    backgroundColor: theme.colors.surface,
  },
  solution: {
    fontSize: 18,
    lineHeight: 24,
    marginBottom: 16,
    textAlign: 'center',
  },
  actions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 16,
  },
  shadowContainer: {
    overflow: 'hidden',
    paddingBottom: 4,
  },
  modalContainer: {
    backgroundColor: 'white',
    padding: 20,
    margin: 20,
    borderRadius: theme.roundness,
  },
}); 